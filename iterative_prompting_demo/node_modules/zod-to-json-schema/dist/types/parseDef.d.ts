import { ZodTypeDef } from "zod";
import { JsonSchema7AnyType } from "zod-to-json-schema/dist/types/parsers/any.js";
import { JsonSchema7ArrayType } from "zod-to-json-schema/dist/types/parsers/array.js";
import { JsonSchema7BigintType } from "zod-to-json-schema/dist/types/parsers/bigint.js";
import { JsonSchema7BooleanType } from "zod-to-json-schema/dist/types/parsers/boolean.js";
import { JsonSchema7DateType } from "zod-to-json-schema/dist/types/parsers/date.js";
import { JsonSchema7EnumType } from "zod-to-json-schema/dist/types/parsers/enum.js";
import { JsonSchema7AllOfType } from "zod-to-json-schema/dist/types/parsers/intersection.js";
import { JsonSchema7LiteralType } from "zod-to-json-schema/dist/types/parsers/literal.js";
import { JsonSchema7MapType } from "zod-to-json-schema/dist/types/parsers/map.js";
import { JsonSchema7NativeEnumType } from "zod-to-json-schema/dist/types/parsers/nativeEnum.js";
import { JsonSchema7NeverType } from "zod-to-json-schema/dist/types/parsers/never.js";
import { JsonSchema7NullType } from "zod-to-json-schema/dist/types/parsers/null.js";
import { JsonSchema7NullableType } from "zod-to-json-schema/dist/types/parsers/nullable.js";
import { JsonSchema7NumberType } from "zod-to-json-schema/dist/types/parsers/number.js";
import { JsonSchema7ObjectType } from "zod-to-json-schema/dist/types/parsers/object.js";
import { JsonSchema7RecordType } from "zod-to-json-schema/dist/types/parsers/record.js";
import { JsonSchema7SetType } from "zod-to-json-schema/dist/types/parsers/set.js";
import { JsonSchema7StringType } from "zod-to-json-schema/dist/types/parsers/string.js";
import { JsonSchema7TupleType } from "zod-to-json-schema/dist/types/parsers/tuple.js";
import { JsonSchema7UndefinedType } from "zod-to-json-schema/dist/types/parsers/undefined.js";
import { JsonSchema7UnionType } from "zod-to-json-schema/dist/types/parsers/union.js";
import { JsonSchema7UnknownType } from "zod-to-json-schema/dist/types/parsers/unknown.js";
import { Refs } from "zod-to-json-schema/dist/types/Refs.js";
type JsonSchema7RefType = {
    $ref: string;
};
type JsonSchema7Meta = {
    default?: any;
    description?: string;
    markdownDescription?: string;
};
export type JsonSchema7TypeUnion = JsonSchema7StringType | JsonSchema7ArrayType | JsonSchema7NumberType | JsonSchema7BigintType | JsonSchema7BooleanType | JsonSchema7DateType | JsonSchema7EnumType | JsonSchema7LiteralType | JsonSchema7NativeEnumType | JsonSchema7NullType | JsonSchema7NumberType | JsonSchema7ObjectType | JsonSchema7RecordType | JsonSchema7TupleType | JsonSchema7UnionType | JsonSchema7UndefinedType | JsonSchema7RefType | JsonSchema7NeverType | JsonSchema7MapType | JsonSchema7AnyType | JsonSchema7NullableType | JsonSchema7AllOfType | JsonSchema7UnknownType | JsonSchema7SetType;
export type JsonSchema7Type = JsonSchema7TypeUnion & JsonSchema7Meta;
export declare function parseDef(def: ZodTypeDef, refs: Refs, forceResolution?: boolean): JsonSchema7Type | undefined;
export {};
