"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenAIClient = void 0;
// Import necessary components from LangChain
const openai_1 = require("@langchain/openai");
const messages_1 = require("@langchain/core/messages");
class OpenAIClient {
    constructor(options) {
        this.chatHistory = [];
        this.htmlPageHistory = [];
        this.userId = options.userId;
        this.sessionId = options.sessionId;
        // Configure the ChatOpenAI instance
        this.chatClient = new openai_1.ChatOpenAI({
            apiKey: options.apiKey,
            model: options.model || 'gpt-3.5-turbo',
            temperature: 0.5,
            maxTokens: -1
        });
    }
    async registerUserSession() {
        console.log(`Registering session for user ${this.userId} with session ID ${this.sessionId}`);
    }
    async initialPrompt(prompt) {
        try {
            this.chatHistory.push(new messages_1.HumanMessage(prompt));
            const aiMessage = await this.chatClient.invoke(this.chatHistory);
            this.chatHistory.push(aiMessage);
            this.htmlPageHistory.push(aiMessage.content.toString());
        }
        catch (error) {
            console.error('Error in initial prompt:', error);
            if (error instanceof Error) {
                return error.message.toString(); // Convert error message to string
            }
            else {
                return "An unknown error occurred";
            }
        }
        return this.htmlPageHistory[this.htmlPageHistory.length - 1];
    }
    async iterativePrompt(feedback) {
        try {
            this.chatHistory.push(new messages_1.HumanMessage(feedback));
            const aiMessage = await this.chatClient.invoke(this.chatHistory);
            this.chatHistory.push(aiMessage);
            this.htmlPageHistory.push(aiMessage.content.toString());
        }
        catch (error) {
            console.error('Error in iterative prompt:', error);
            if (error instanceof Error) {
                return error.message.toString(); // Convert error message to string
            }
            else {
                return "An unknown error occurred";
            }
        }
        return this.htmlPageHistory[this.htmlPageHistory.length - 1];
    }
    getPromptHistory(depth) {
        return this.chatHistory.slice(-depth);
    }
    getPageHistory(depth) {
        return this.htmlPageHistory.slice(-depth);
    }
}
exports.OpenAIClient = OpenAIClient;
