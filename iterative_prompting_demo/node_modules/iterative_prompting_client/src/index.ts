// Import necessary components from LangChain
import { ChatOpenAI } from '@langchain/openai';
import { HumanMessage} from "@langchain/core/messages";

interface ClientOptions {
  apiKey: string;
  model?: string;
  userId: string;
  sessionId: string;
}

export class OpenAIClient {
  private chatClient: ChatOpenAI;
  private userId: string;
  private sessionId: string;
  private chatHistory: HumanMessage[] = [];
  private htmlPageHistory: string[] = [];

  constructor(options: ClientOptions) {
    this.userId = options.userId;
    this.sessionId = options.sessionId;
    // Configure the ChatOpenAI instance
    this.chatClient = new ChatOpenAI({
      apiKey: options.apiKey,
      model: options.model || 'gpt-3.5-turbo',
      temperature: 0.5,
      maxTokens: -1
    });
  }

  async registerUserSession(): Promise<void> {
    console.log(`Registering session for user ${this.userId} with session ID ${this.sessionId}`);
  }


  async initialPrompt(prompt: string): Promise<string> {
    try {
      this.chatHistory.push(new HumanMessage(prompt));
      const aiMessage = await this.chatClient.invoke(this.chatHistory);
      this.chatHistory.push(aiMessage);
      this.htmlPageHistory.push(aiMessage.content.toString());
      
    } catch (error) {
      console.error('Error in initial prompt:', error);
      if (error instanceof Error) {
        return error.message.toString(); // Convert error message to string
      } else {
          return "An unknown error occurred";
      }
    }
    return this.htmlPageHistory[this.htmlPageHistory.length - 1];
  }
  
  async iterativePrompt(feedback: string): Promise<string> {
    try {
      this.chatHistory.push(new HumanMessage(feedback));
      const aiMessage = await this.chatClient.invoke(this.chatHistory);
      this.chatHistory.push(aiMessage);
      this.htmlPageHistory.push(aiMessage.content.toString());
      
    } catch (error) {
      console.error('Error in iterative prompt:', error);
      if (error instanceof Error) {
          return error.message.toString(); // Convert error message to string
      } else {
          return "An unknown error occurred";
      }
    }
    return this.htmlPageHistory[this.htmlPageHistory.length - 1];
  }
  
  getPromptHistory(depth: number): HumanMessage[] {
    return this.chatHistory.slice(-depth);
  }

  getPageHistory(depth: number): string[] {
    return this.htmlPageHistory.slice(-depth);
  }
}

